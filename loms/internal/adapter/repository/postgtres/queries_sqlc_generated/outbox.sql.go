// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox.sql

package repository_sqlc

import (
	"context"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO outbox (topic, key, payload)
VALUES ($1, $2, $3)
`

type CreateEventParams struct {
	Topic   string
	Key     *string
	Payload []byte
}

func (q *Queries) CreateEvent(ctx context.Context, arg *CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent, arg.Topic, arg.Key, arg.Payload)
	return err
}

const fetchNextMessages = `-- name: FetchNextMessages :many
SELECT id, topic, key, payload, status 
FROM outbox
WHERE status = 'new'
ORDER BY id
LIMIT $1
FOR UPDATE SKIP LOCKED
`

type FetchNextMessagesRow struct {
	ID      int64
	Topic   string
	Key     *string
	Payload []byte
	Status  OutboxStatus
}

func (q *Queries) FetchNextMessages(ctx context.Context, limit int32) ([]*FetchNextMessagesRow, error) {
	rows, err := q.db.Query(ctx, fetchNextMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FetchNextMessagesRow
	for rows.Next() {
		var i FetchNextMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Topic,
			&i.Key,
			&i.Payload,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsError = `-- name: MarkAsError :exec
UPDATE outbox
SET
    status = 'error',
    sent_at = NOW()
WHERE id = ANY($1::bigint[])
`

func (q *Queries) MarkAsError(ctx context.Context, ids []int64) error {
	_, err := q.db.Exec(ctx, markAsError, ids)
	return err
}

const markAsSent = `-- name: MarkAsSent :exec
UPDATE outbox
SET
    status = 'sent',
    sent_at = NOW()
WHERE id = ANY($1::bigint[])
`

func (q *Queries) MarkAsSent(ctx context.Context, ids []int64) error {
	_, err := q.db.Exec(ctx, markAsSent, ids)
	return err
}
