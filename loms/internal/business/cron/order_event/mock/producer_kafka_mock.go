// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

import (
	"context"
	"route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProducerKafkaMock implements mm_orderevent.producerKafka
type ProducerKafkaMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendOrderEventsBatch          func(ctx context.Context, orderEvents []domain.Event) (successIDs []int64, errorIDs []int64, err error)
	funcSendOrderEventsBatchOrigin    string
	inspectFuncSendOrderEventsBatch   func(ctx context.Context, orderEvents []domain.Event)
	afterSendOrderEventsBatchCounter  uint64
	beforeSendOrderEventsBatchCounter uint64
	SendOrderEventsBatchMock          mProducerKafkaMockSendOrderEventsBatch
}

// NewProducerKafkaMock returns a mock for mm_orderevent.producerKafka
func NewProducerKafkaMock(t minimock.Tester) *ProducerKafkaMock {
	m := &ProducerKafkaMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendOrderEventsBatchMock = mProducerKafkaMockSendOrderEventsBatch{mock: m}
	m.SendOrderEventsBatchMock.callArgs = []*ProducerKafkaMockSendOrderEventsBatchParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProducerKafkaMockSendOrderEventsBatch struct {
	optional           bool
	mock               *ProducerKafkaMock
	defaultExpectation *ProducerKafkaMockSendOrderEventsBatchExpectation
	expectations       []*ProducerKafkaMockSendOrderEventsBatchExpectation

	callArgs []*ProducerKafkaMockSendOrderEventsBatchParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProducerKafkaMockSendOrderEventsBatchExpectation specifies expectation struct of the producerKafka.SendOrderEventsBatch
type ProducerKafkaMockSendOrderEventsBatchExpectation struct {
	mock               *ProducerKafkaMock
	params             *ProducerKafkaMockSendOrderEventsBatchParams
	paramPtrs          *ProducerKafkaMockSendOrderEventsBatchParamPtrs
	expectationOrigins ProducerKafkaMockSendOrderEventsBatchExpectationOrigins
	results            *ProducerKafkaMockSendOrderEventsBatchResults
	returnOrigin       string
	Counter            uint64
}

// ProducerKafkaMockSendOrderEventsBatchParams contains parameters of the producerKafka.SendOrderEventsBatch
type ProducerKafkaMockSendOrderEventsBatchParams struct {
	ctx         context.Context
	orderEvents []domain.Event
}

// ProducerKafkaMockSendOrderEventsBatchParamPtrs contains pointers to parameters of the producerKafka.SendOrderEventsBatch
type ProducerKafkaMockSendOrderEventsBatchParamPtrs struct {
	ctx         *context.Context
	orderEvents *[]domain.Event
}

// ProducerKafkaMockSendOrderEventsBatchResults contains results of the producerKafka.SendOrderEventsBatch
type ProducerKafkaMockSendOrderEventsBatchResults struct {
	successIDs []int64
	errorIDs   []int64
	err        error
}

// ProducerKafkaMockSendOrderEventsBatchOrigins contains origins of expectations of the producerKafka.SendOrderEventsBatch
type ProducerKafkaMockSendOrderEventsBatchExpectationOrigins struct {
	origin            string
	originCtx         string
	originOrderEvents string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Optional() *mProducerKafkaMockSendOrderEventsBatch {
	mmSendOrderEventsBatch.optional = true
	return mmSendOrderEventsBatch
}

// Expect sets up expected params for producerKafka.SendOrderEventsBatch
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Expect(ctx context.Context, orderEvents []domain.Event) *mProducerKafkaMockSendOrderEventsBatch {
	if mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Set")
	}

	if mmSendOrderEventsBatch.defaultExpectation == nil {
		mmSendOrderEventsBatch.defaultExpectation = &ProducerKafkaMockSendOrderEventsBatchExpectation{}
	}

	if mmSendOrderEventsBatch.defaultExpectation.paramPtrs != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by ExpectParams functions")
	}

	mmSendOrderEventsBatch.defaultExpectation.params = &ProducerKafkaMockSendOrderEventsBatchParams{ctx, orderEvents}
	mmSendOrderEventsBatch.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendOrderEventsBatch.expectations {
		if minimock.Equal(e.params, mmSendOrderEventsBatch.defaultExpectation.params) {
			mmSendOrderEventsBatch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendOrderEventsBatch.defaultExpectation.params)
		}
	}

	return mmSendOrderEventsBatch
}

// ExpectCtxParam1 sets up expected param ctx for producerKafka.SendOrderEventsBatch
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) ExpectCtxParam1(ctx context.Context) *mProducerKafkaMockSendOrderEventsBatch {
	if mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Set")
	}

	if mmSendOrderEventsBatch.defaultExpectation == nil {
		mmSendOrderEventsBatch.defaultExpectation = &ProducerKafkaMockSendOrderEventsBatchExpectation{}
	}

	if mmSendOrderEventsBatch.defaultExpectation.params != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Expect")
	}

	if mmSendOrderEventsBatch.defaultExpectation.paramPtrs == nil {
		mmSendOrderEventsBatch.defaultExpectation.paramPtrs = &ProducerKafkaMockSendOrderEventsBatchParamPtrs{}
	}
	mmSendOrderEventsBatch.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendOrderEventsBatch.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendOrderEventsBatch
}

// ExpectOrderEventsParam2 sets up expected param orderEvents for producerKafka.SendOrderEventsBatch
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) ExpectOrderEventsParam2(orderEvents []domain.Event) *mProducerKafkaMockSendOrderEventsBatch {
	if mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Set")
	}

	if mmSendOrderEventsBatch.defaultExpectation == nil {
		mmSendOrderEventsBatch.defaultExpectation = &ProducerKafkaMockSendOrderEventsBatchExpectation{}
	}

	if mmSendOrderEventsBatch.defaultExpectation.params != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Expect")
	}

	if mmSendOrderEventsBatch.defaultExpectation.paramPtrs == nil {
		mmSendOrderEventsBatch.defaultExpectation.paramPtrs = &ProducerKafkaMockSendOrderEventsBatchParamPtrs{}
	}
	mmSendOrderEventsBatch.defaultExpectation.paramPtrs.orderEvents = &orderEvents
	mmSendOrderEventsBatch.defaultExpectation.expectationOrigins.originOrderEvents = minimock.CallerInfo(1)

	return mmSendOrderEventsBatch
}

// Inspect accepts an inspector function that has same arguments as the producerKafka.SendOrderEventsBatch
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Inspect(f func(ctx context.Context, orderEvents []domain.Event)) *mProducerKafkaMockSendOrderEventsBatch {
	if mmSendOrderEventsBatch.mock.inspectFuncSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("Inspect function is already set for ProducerKafkaMock.SendOrderEventsBatch")
	}

	mmSendOrderEventsBatch.mock.inspectFuncSendOrderEventsBatch = f

	return mmSendOrderEventsBatch
}

// Return sets up results that will be returned by producerKafka.SendOrderEventsBatch
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Return(successIDs []int64, errorIDs []int64, err error) *ProducerKafkaMock {
	if mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Set")
	}

	if mmSendOrderEventsBatch.defaultExpectation == nil {
		mmSendOrderEventsBatch.defaultExpectation = &ProducerKafkaMockSendOrderEventsBatchExpectation{mock: mmSendOrderEventsBatch.mock}
	}
	mmSendOrderEventsBatch.defaultExpectation.results = &ProducerKafkaMockSendOrderEventsBatchResults{successIDs, errorIDs, err}
	mmSendOrderEventsBatch.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendOrderEventsBatch.mock
}

// Set uses given function f to mock the producerKafka.SendOrderEventsBatch method
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Set(f func(ctx context.Context, orderEvents []domain.Event) (successIDs []int64, errorIDs []int64, err error)) *ProducerKafkaMock {
	if mmSendOrderEventsBatch.defaultExpectation != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("Default expectation is already set for the producerKafka.SendOrderEventsBatch method")
	}

	if len(mmSendOrderEventsBatch.expectations) > 0 {
		mmSendOrderEventsBatch.mock.t.Fatalf("Some expectations are already set for the producerKafka.SendOrderEventsBatch method")
	}

	mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch = f
	mmSendOrderEventsBatch.mock.funcSendOrderEventsBatchOrigin = minimock.CallerInfo(1)
	return mmSendOrderEventsBatch.mock
}

// When sets expectation for the producerKafka.SendOrderEventsBatch which will trigger the result defined by the following
// Then helper
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) When(ctx context.Context, orderEvents []domain.Event) *ProducerKafkaMockSendOrderEventsBatchExpectation {
	if mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.mock.t.Fatalf("ProducerKafkaMock.SendOrderEventsBatch mock is already set by Set")
	}

	expectation := &ProducerKafkaMockSendOrderEventsBatchExpectation{
		mock:               mmSendOrderEventsBatch.mock,
		params:             &ProducerKafkaMockSendOrderEventsBatchParams{ctx, orderEvents},
		expectationOrigins: ProducerKafkaMockSendOrderEventsBatchExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendOrderEventsBatch.expectations = append(mmSendOrderEventsBatch.expectations, expectation)
	return expectation
}

// Then sets up producerKafka.SendOrderEventsBatch return parameters for the expectation previously defined by the When method
func (e *ProducerKafkaMockSendOrderEventsBatchExpectation) Then(successIDs []int64, errorIDs []int64, err error) *ProducerKafkaMock {
	e.results = &ProducerKafkaMockSendOrderEventsBatchResults{successIDs, errorIDs, err}
	return e.mock
}

// Times sets number of times producerKafka.SendOrderEventsBatch should be invoked
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Times(n uint64) *mProducerKafkaMockSendOrderEventsBatch {
	if n == 0 {
		mmSendOrderEventsBatch.mock.t.Fatalf("Times of ProducerKafkaMock.SendOrderEventsBatch mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendOrderEventsBatch.expectedInvocations, n)
	mmSendOrderEventsBatch.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendOrderEventsBatch
}

func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) invocationsDone() bool {
	if len(mmSendOrderEventsBatch.expectations) == 0 && mmSendOrderEventsBatch.defaultExpectation == nil && mmSendOrderEventsBatch.mock.funcSendOrderEventsBatch == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendOrderEventsBatch.mock.afterSendOrderEventsBatchCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendOrderEventsBatch.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendOrderEventsBatch implements mm_orderevent.producerKafka
func (mmSendOrderEventsBatch *ProducerKafkaMock) SendOrderEventsBatch(ctx context.Context, orderEvents []domain.Event) (successIDs []int64, errorIDs []int64, err error) {
	mm_atomic.AddUint64(&mmSendOrderEventsBatch.beforeSendOrderEventsBatchCounter, 1)
	defer mm_atomic.AddUint64(&mmSendOrderEventsBatch.afterSendOrderEventsBatchCounter, 1)

	mmSendOrderEventsBatch.t.Helper()

	if mmSendOrderEventsBatch.inspectFuncSendOrderEventsBatch != nil {
		mmSendOrderEventsBatch.inspectFuncSendOrderEventsBatch(ctx, orderEvents)
	}

	mm_params := ProducerKafkaMockSendOrderEventsBatchParams{ctx, orderEvents}

	// Record call args
	mmSendOrderEventsBatch.SendOrderEventsBatchMock.mutex.Lock()
	mmSendOrderEventsBatch.SendOrderEventsBatchMock.callArgs = append(mmSendOrderEventsBatch.SendOrderEventsBatchMock.callArgs, &mm_params)
	mmSendOrderEventsBatch.SendOrderEventsBatchMock.mutex.Unlock()

	for _, e := range mmSendOrderEventsBatch.SendOrderEventsBatchMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.successIDs, e.results.errorIDs, e.results.err
		}
	}

	if mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.Counter, 1)
		mm_want := mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.params
		mm_want_ptrs := mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.paramPtrs

		mm_got := ProducerKafkaMockSendOrderEventsBatchParams{ctx, orderEvents}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendOrderEventsBatch.t.Errorf("ProducerKafkaMock.SendOrderEventsBatch got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.orderEvents != nil && !minimock.Equal(*mm_want_ptrs.orderEvents, mm_got.orderEvents) {
				mmSendOrderEventsBatch.t.Errorf("ProducerKafkaMock.SendOrderEventsBatch got unexpected parameter orderEvents, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.expectationOrigins.originOrderEvents, *mm_want_ptrs.orderEvents, mm_got.orderEvents, minimock.Diff(*mm_want_ptrs.orderEvents, mm_got.orderEvents))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendOrderEventsBatch.t.Errorf("ProducerKafkaMock.SendOrderEventsBatch got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendOrderEventsBatch.SendOrderEventsBatchMock.defaultExpectation.results
		if mm_results == nil {
			mmSendOrderEventsBatch.t.Fatal("No results are set for the ProducerKafkaMock.SendOrderEventsBatch")
		}
		return (*mm_results).successIDs, (*mm_results).errorIDs, (*mm_results).err
	}
	if mmSendOrderEventsBatch.funcSendOrderEventsBatch != nil {
		return mmSendOrderEventsBatch.funcSendOrderEventsBatch(ctx, orderEvents)
	}
	mmSendOrderEventsBatch.t.Fatalf("Unexpected call to ProducerKafkaMock.SendOrderEventsBatch. %v %v", ctx, orderEvents)
	return
}

// SendOrderEventsBatchAfterCounter returns a count of finished ProducerKafkaMock.SendOrderEventsBatch invocations
func (mmSendOrderEventsBatch *ProducerKafkaMock) SendOrderEventsBatchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendOrderEventsBatch.afterSendOrderEventsBatchCounter)
}

// SendOrderEventsBatchBeforeCounter returns a count of ProducerKafkaMock.SendOrderEventsBatch invocations
func (mmSendOrderEventsBatch *ProducerKafkaMock) SendOrderEventsBatchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendOrderEventsBatch.beforeSendOrderEventsBatchCounter)
}

// Calls returns a list of arguments used in each call to ProducerKafkaMock.SendOrderEventsBatch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendOrderEventsBatch *mProducerKafkaMockSendOrderEventsBatch) Calls() []*ProducerKafkaMockSendOrderEventsBatchParams {
	mmSendOrderEventsBatch.mutex.RLock()

	argCopy := make([]*ProducerKafkaMockSendOrderEventsBatchParams, len(mmSendOrderEventsBatch.callArgs))
	copy(argCopy, mmSendOrderEventsBatch.callArgs)

	mmSendOrderEventsBatch.mutex.RUnlock()

	return argCopy
}

// MinimockSendOrderEventsBatchDone returns true if the count of the SendOrderEventsBatch invocations corresponds
// the number of defined expectations
func (m *ProducerKafkaMock) MinimockSendOrderEventsBatchDone() bool {
	if m.SendOrderEventsBatchMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendOrderEventsBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendOrderEventsBatchMock.invocationsDone()
}

// MinimockSendOrderEventsBatchInspect logs each unmet expectation
func (m *ProducerKafkaMock) MinimockSendOrderEventsBatchInspect() {
	for _, e := range m.SendOrderEventsBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProducerKafkaMock.SendOrderEventsBatch at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendOrderEventsBatchCounter := mm_atomic.LoadUint64(&m.afterSendOrderEventsBatchCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendOrderEventsBatchMock.defaultExpectation != nil && afterSendOrderEventsBatchCounter < 1 {
		if m.SendOrderEventsBatchMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProducerKafkaMock.SendOrderEventsBatch at\n%s", m.SendOrderEventsBatchMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProducerKafkaMock.SendOrderEventsBatch at\n%s with params: %#v", m.SendOrderEventsBatchMock.defaultExpectation.expectationOrigins.origin, *m.SendOrderEventsBatchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendOrderEventsBatch != nil && afterSendOrderEventsBatchCounter < 1 {
		m.t.Errorf("Expected call to ProducerKafkaMock.SendOrderEventsBatch at\n%s", m.funcSendOrderEventsBatchOrigin)
	}

	if !m.SendOrderEventsBatchMock.invocationsDone() && afterSendOrderEventsBatchCounter > 0 {
		m.t.Errorf("Expected %d calls to ProducerKafkaMock.SendOrderEventsBatch at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendOrderEventsBatchMock.expectedInvocations), m.SendOrderEventsBatchMock.expectedInvocationsOrigin, afterSendOrderEventsBatchCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProducerKafkaMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendOrderEventsBatchInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProducerKafkaMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProducerKafkaMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendOrderEventsBatchDone()
}
