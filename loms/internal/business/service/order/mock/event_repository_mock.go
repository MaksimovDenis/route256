// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

import (
	"context"
	"route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// EventRepositoryMock implements mm_order.eventRepository
type EventRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateEvent          func(ctx context.Context, events domain.Event) (err error)
	funcCreateEventOrigin    string
	inspectFuncCreateEvent   func(ctx context.Context, events domain.Event)
	afterCreateEventCounter  uint64
	beforeCreateEventCounter uint64
	CreateEventMock          mEventRepositoryMockCreateEvent
}

// NewEventRepositoryMock returns a mock for mm_order.eventRepository
func NewEventRepositoryMock(t minimock.Tester) *EventRepositoryMock {
	m := &EventRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateEventMock = mEventRepositoryMockCreateEvent{mock: m}
	m.CreateEventMock.callArgs = []*EventRepositoryMockCreateEventParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mEventRepositoryMockCreateEvent struct {
	optional           bool
	mock               *EventRepositoryMock
	defaultExpectation *EventRepositoryMockCreateEventExpectation
	expectations       []*EventRepositoryMockCreateEventExpectation

	callArgs []*EventRepositoryMockCreateEventParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// EventRepositoryMockCreateEventExpectation specifies expectation struct of the eventRepository.CreateEvent
type EventRepositoryMockCreateEventExpectation struct {
	mock               *EventRepositoryMock
	params             *EventRepositoryMockCreateEventParams
	paramPtrs          *EventRepositoryMockCreateEventParamPtrs
	expectationOrigins EventRepositoryMockCreateEventExpectationOrigins
	results            *EventRepositoryMockCreateEventResults
	returnOrigin       string
	Counter            uint64
}

// EventRepositoryMockCreateEventParams contains parameters of the eventRepository.CreateEvent
type EventRepositoryMockCreateEventParams struct {
	ctx    context.Context
	events domain.Event
}

// EventRepositoryMockCreateEventParamPtrs contains pointers to parameters of the eventRepository.CreateEvent
type EventRepositoryMockCreateEventParamPtrs struct {
	ctx    *context.Context
	events *domain.Event
}

// EventRepositoryMockCreateEventResults contains results of the eventRepository.CreateEvent
type EventRepositoryMockCreateEventResults struct {
	err error
}

// EventRepositoryMockCreateEventOrigins contains origins of expectations of the eventRepository.CreateEvent
type EventRepositoryMockCreateEventExpectationOrigins struct {
	origin       string
	originCtx    string
	originEvents string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Optional() *mEventRepositoryMockCreateEvent {
	mmCreateEvent.optional = true
	return mmCreateEvent
}

// Expect sets up expected params for eventRepository.CreateEvent
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Expect(ctx context.Context, events domain.Event) *mEventRepositoryMockCreateEvent {
	if mmCreateEvent.mock.funcCreateEvent != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Set")
	}

	if mmCreateEvent.defaultExpectation == nil {
		mmCreateEvent.defaultExpectation = &EventRepositoryMockCreateEventExpectation{}
	}

	if mmCreateEvent.defaultExpectation.paramPtrs != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by ExpectParams functions")
	}

	mmCreateEvent.defaultExpectation.params = &EventRepositoryMockCreateEventParams{ctx, events}
	mmCreateEvent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateEvent.expectations {
		if minimock.Equal(e.params, mmCreateEvent.defaultExpectation.params) {
			mmCreateEvent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateEvent.defaultExpectation.params)
		}
	}

	return mmCreateEvent
}

// ExpectCtxParam1 sets up expected param ctx for eventRepository.CreateEvent
func (mmCreateEvent *mEventRepositoryMockCreateEvent) ExpectCtxParam1(ctx context.Context) *mEventRepositoryMockCreateEvent {
	if mmCreateEvent.mock.funcCreateEvent != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Set")
	}

	if mmCreateEvent.defaultExpectation == nil {
		mmCreateEvent.defaultExpectation = &EventRepositoryMockCreateEventExpectation{}
	}

	if mmCreateEvent.defaultExpectation.params != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Expect")
	}

	if mmCreateEvent.defaultExpectation.paramPtrs == nil {
		mmCreateEvent.defaultExpectation.paramPtrs = &EventRepositoryMockCreateEventParamPtrs{}
	}
	mmCreateEvent.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateEvent.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateEvent
}

// ExpectEventsParam2 sets up expected param events for eventRepository.CreateEvent
func (mmCreateEvent *mEventRepositoryMockCreateEvent) ExpectEventsParam2(events domain.Event) *mEventRepositoryMockCreateEvent {
	if mmCreateEvent.mock.funcCreateEvent != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Set")
	}

	if mmCreateEvent.defaultExpectation == nil {
		mmCreateEvent.defaultExpectation = &EventRepositoryMockCreateEventExpectation{}
	}

	if mmCreateEvent.defaultExpectation.params != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Expect")
	}

	if mmCreateEvent.defaultExpectation.paramPtrs == nil {
		mmCreateEvent.defaultExpectation.paramPtrs = &EventRepositoryMockCreateEventParamPtrs{}
	}
	mmCreateEvent.defaultExpectation.paramPtrs.events = &events
	mmCreateEvent.defaultExpectation.expectationOrigins.originEvents = minimock.CallerInfo(1)

	return mmCreateEvent
}

// Inspect accepts an inspector function that has same arguments as the eventRepository.CreateEvent
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Inspect(f func(ctx context.Context, events domain.Event)) *mEventRepositoryMockCreateEvent {
	if mmCreateEvent.mock.inspectFuncCreateEvent != nil {
		mmCreateEvent.mock.t.Fatalf("Inspect function is already set for EventRepositoryMock.CreateEvent")
	}

	mmCreateEvent.mock.inspectFuncCreateEvent = f

	return mmCreateEvent
}

// Return sets up results that will be returned by eventRepository.CreateEvent
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Return(err error) *EventRepositoryMock {
	if mmCreateEvent.mock.funcCreateEvent != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Set")
	}

	if mmCreateEvent.defaultExpectation == nil {
		mmCreateEvent.defaultExpectation = &EventRepositoryMockCreateEventExpectation{mock: mmCreateEvent.mock}
	}
	mmCreateEvent.defaultExpectation.results = &EventRepositoryMockCreateEventResults{err}
	mmCreateEvent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateEvent.mock
}

// Set uses given function f to mock the eventRepository.CreateEvent method
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Set(f func(ctx context.Context, events domain.Event) (err error)) *EventRepositoryMock {
	if mmCreateEvent.defaultExpectation != nil {
		mmCreateEvent.mock.t.Fatalf("Default expectation is already set for the eventRepository.CreateEvent method")
	}

	if len(mmCreateEvent.expectations) > 0 {
		mmCreateEvent.mock.t.Fatalf("Some expectations are already set for the eventRepository.CreateEvent method")
	}

	mmCreateEvent.mock.funcCreateEvent = f
	mmCreateEvent.mock.funcCreateEventOrigin = minimock.CallerInfo(1)
	return mmCreateEvent.mock
}

// When sets expectation for the eventRepository.CreateEvent which will trigger the result defined by the following
// Then helper
func (mmCreateEvent *mEventRepositoryMockCreateEvent) When(ctx context.Context, events domain.Event) *EventRepositoryMockCreateEventExpectation {
	if mmCreateEvent.mock.funcCreateEvent != nil {
		mmCreateEvent.mock.t.Fatalf("EventRepositoryMock.CreateEvent mock is already set by Set")
	}

	expectation := &EventRepositoryMockCreateEventExpectation{
		mock:               mmCreateEvent.mock,
		params:             &EventRepositoryMockCreateEventParams{ctx, events},
		expectationOrigins: EventRepositoryMockCreateEventExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateEvent.expectations = append(mmCreateEvent.expectations, expectation)
	return expectation
}

// Then sets up eventRepository.CreateEvent return parameters for the expectation previously defined by the When method
func (e *EventRepositoryMockCreateEventExpectation) Then(err error) *EventRepositoryMock {
	e.results = &EventRepositoryMockCreateEventResults{err}
	return e.mock
}

// Times sets number of times eventRepository.CreateEvent should be invoked
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Times(n uint64) *mEventRepositoryMockCreateEvent {
	if n == 0 {
		mmCreateEvent.mock.t.Fatalf("Times of EventRepositoryMock.CreateEvent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateEvent.expectedInvocations, n)
	mmCreateEvent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateEvent
}

func (mmCreateEvent *mEventRepositoryMockCreateEvent) invocationsDone() bool {
	if len(mmCreateEvent.expectations) == 0 && mmCreateEvent.defaultExpectation == nil && mmCreateEvent.mock.funcCreateEvent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateEvent.mock.afterCreateEventCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateEvent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateEvent implements mm_order.eventRepository
func (mmCreateEvent *EventRepositoryMock) CreateEvent(ctx context.Context, events domain.Event) (err error) {
	mm_atomic.AddUint64(&mmCreateEvent.beforeCreateEventCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateEvent.afterCreateEventCounter, 1)

	mmCreateEvent.t.Helper()

	if mmCreateEvent.inspectFuncCreateEvent != nil {
		mmCreateEvent.inspectFuncCreateEvent(ctx, events)
	}

	mm_params := EventRepositoryMockCreateEventParams{ctx, events}

	// Record call args
	mmCreateEvent.CreateEventMock.mutex.Lock()
	mmCreateEvent.CreateEventMock.callArgs = append(mmCreateEvent.CreateEventMock.callArgs, &mm_params)
	mmCreateEvent.CreateEventMock.mutex.Unlock()

	for _, e := range mmCreateEvent.CreateEventMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateEvent.CreateEventMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateEvent.CreateEventMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateEvent.CreateEventMock.defaultExpectation.params
		mm_want_ptrs := mmCreateEvent.CreateEventMock.defaultExpectation.paramPtrs

		mm_got := EventRepositoryMockCreateEventParams{ctx, events}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateEvent.t.Errorf("EventRepositoryMock.CreateEvent got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateEvent.CreateEventMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.events != nil && !minimock.Equal(*mm_want_ptrs.events, mm_got.events) {
				mmCreateEvent.t.Errorf("EventRepositoryMock.CreateEvent got unexpected parameter events, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateEvent.CreateEventMock.defaultExpectation.expectationOrigins.originEvents, *mm_want_ptrs.events, mm_got.events, minimock.Diff(*mm_want_ptrs.events, mm_got.events))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateEvent.t.Errorf("EventRepositoryMock.CreateEvent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateEvent.CreateEventMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateEvent.CreateEventMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateEvent.t.Fatal("No results are set for the EventRepositoryMock.CreateEvent")
		}
		return (*mm_results).err
	}
	if mmCreateEvent.funcCreateEvent != nil {
		return mmCreateEvent.funcCreateEvent(ctx, events)
	}
	mmCreateEvent.t.Fatalf("Unexpected call to EventRepositoryMock.CreateEvent. %v %v", ctx, events)
	return
}

// CreateEventAfterCounter returns a count of finished EventRepositoryMock.CreateEvent invocations
func (mmCreateEvent *EventRepositoryMock) CreateEventAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateEvent.afterCreateEventCounter)
}

// CreateEventBeforeCounter returns a count of EventRepositoryMock.CreateEvent invocations
func (mmCreateEvent *EventRepositoryMock) CreateEventBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateEvent.beforeCreateEventCounter)
}

// Calls returns a list of arguments used in each call to EventRepositoryMock.CreateEvent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateEvent *mEventRepositoryMockCreateEvent) Calls() []*EventRepositoryMockCreateEventParams {
	mmCreateEvent.mutex.RLock()

	argCopy := make([]*EventRepositoryMockCreateEventParams, len(mmCreateEvent.callArgs))
	copy(argCopy, mmCreateEvent.callArgs)

	mmCreateEvent.mutex.RUnlock()

	return argCopy
}

// MinimockCreateEventDone returns true if the count of the CreateEvent invocations corresponds
// the number of defined expectations
func (m *EventRepositoryMock) MinimockCreateEventDone() bool {
	if m.CreateEventMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateEventMock.invocationsDone()
}

// MinimockCreateEventInspect logs each unmet expectation
func (m *EventRepositoryMock) MinimockCreateEventInspect() {
	for _, e := range m.CreateEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventRepositoryMock.CreateEvent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateEventCounter := mm_atomic.LoadUint64(&m.afterCreateEventCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateEventMock.defaultExpectation != nil && afterCreateEventCounter < 1 {
		if m.CreateEventMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to EventRepositoryMock.CreateEvent at\n%s", m.CreateEventMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to EventRepositoryMock.CreateEvent at\n%s with params: %#v", m.CreateEventMock.defaultExpectation.expectationOrigins.origin, *m.CreateEventMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateEvent != nil && afterCreateEventCounter < 1 {
		m.t.Errorf("Expected call to EventRepositoryMock.CreateEvent at\n%s", m.funcCreateEventOrigin)
	}

	if !m.CreateEventMock.invocationsDone() && afterCreateEventCounter > 0 {
		m.t.Errorf("Expected %d calls to EventRepositoryMock.CreateEvent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateEventMock.expectedInvocations), m.CreateEventMock.expectedInvocationsOrigin, afterCreateEventCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EventRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateEventInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EventRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EventRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateEventDone()
}
