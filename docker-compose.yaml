volumes:
  prometheus_data: {}
  grafana_data: {}
  
services:
  cart:
    build: ./cart
    ports:
      - "8080:8080"
    depends_on:
      - product-service
      - loms

  product-service:
    image: gitlab-registry.ozon.dev/go/classroom-18/students/homework-draft/products:latest
    ports:
      - "8082:8082"

  loms:
    build: ./loms
    restart: always
    ports:
      - "8083:8083"
      - "8084:8084"
      - "8090:8090"
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-replica:
        condition: service_healthy
      kafka:
        condition: service_healthy

  notifier1:
    build: ./notifier
    restart: always
    depends_on:
      - loms

  notifier2:
    build: ./notifier
    restart: always
    depends_on:
      - loms

  notifier3:
    build: ./notifier
    restart: always
    depends_on:
      - loms
        
  postgres-master:
    image: postgres:16
    container_name: postgres-master
    environment:
      - POSTGRESQL_DATABASE=loms_db
      - POSTGRESQL_USERNAME=loms-user
      - POSTGRESQL_PASSWORD=loms-password
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loms-user"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-replica:
    image: postgres:16
    container_name: postgres-replica
    depends_on:
      - postgres-master
    environment:
      - POSTGRESQL_DATABASE=loms_db
      - POSTGRESQL_USERNAME=loms-user
      - POSTGRESQL_PASSWORD=loms-password
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=postgres-master
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loms-user"]
      interval: 5s
      timeout: 5s
      retries: 5

  goose-migrate:
    build:
      context: ./loms
      dockerfile: Dockerfile.migrate
    command:
      - -dir=./migration
      - postgres
      - postgres://loms-user:loms-password@postgres-master:5432/loms_db?sslmode=disable
      - up
    volumes:
      - ./loms/migration:/app/migration
    depends_on:
      postgres-master:
        condition: service_healthy

  kafka-ui:
    container_name: route256-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      kafka:
        condition: service_healthy

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.7.1
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1 # Уникальный ID брокера в кластере
      # Названия слушателей и протокол безопасности:
      # PLAINTEXT - обычное нешифрованное соединение,
      # CONTROLLER - связь контроллеров (KRaft),
      # PLAINTEXT_HOST - слушатель для подключения с хоста
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # Адреса, которые брокер объявляет клиентам
      # PLAINTEXT://kafka:29092 — внутри Docker-сети,
      # PLAINTEXT_HOST://localhost:9092 — для клиентов с хоста (localhost)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # Адреса, где брокер слушает подключения
      # PLAINTEXT://kafka:29092 — основной брокерский порт,
      # CONTROLLER://kafka:29093 — порт для контроллера (KRaft),
      # PLAINTEXT_HOST://:9092 — порт для внешних клиентов (хост)
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"  # Имя слушателя для контроллера
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Репликация топика с оффсетами
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Минимум реплик для лога транзакций
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Реплкация лога транзакций
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093" # Кворум контроллеров (ID@host:port)
      KAFKA_PROCESS_ROLES: "broker,controller"  # Роли процесса: брокер + контроллер
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"  # Путь для хранения логов и данных Kafka
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk' # Уникальный ID кластера Kafka (KRaft)
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false" # Автомотческое создание топика при первом подключении
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafka-init:
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      kafka:
        condition: service_healthy
    command: "kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --bootstrap-server kafka:29092"

  jaeger:
    image: jaegertracing/all-in-one:1.48
    ports:
      - "6831:6831/udp" # jaeger-client
      - "16686:16686" # web
    depends_on:
      - loms

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards.yaml
    ports:
      - "3000:3000"